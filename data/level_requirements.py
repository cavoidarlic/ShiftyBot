LEVEL_REQUIREMENTS = {
    2: (600, 2280, 0),
    3: (600, 2280, 0),
    4: (600, 2280, 0),
    5: (600, 2280, 0),
    6: (600, 2280, 0),
    7: (600, 2280, 0),
    8: (600, 2280, 0),
    9: (600, 2280, 0),
    10: (600, 2280, 0),
    11: (600, 2280, 20),
    12: (600, 2280, 0),
    13: (600, 2280, 0),
    14: (600, 2280, 0),
    15: (600, 2280, 0),
    16: (600, 2280, 0),
    17: (600, 2280, 0),
    18: (600, 2280, 0),
    19: (600, 2280, 0),
    20: (600, 2280, 0),
    21: (600, 5700, 40),
    22: (600, 5700, 0),
    23: (600, 5700, 0),
    24: (600, 5700, 0),
    25: (600, 5700, 0),
    26: (600, 5700, 0),
    27: (600, 5700, 0),
    28: (600, 5700, 0),
    29: (600, 5700, 0),
    30: (600, 5700, 0),
    31: (840, 5700, 0),
    32: (840, 5700, 0),
    33: (840, 5700, 0),
    34: (840, 5700, 0),
    35: (840, 5700, 0),
    36: (840, 5700, 0),
    37: (840, 5700, 0),
    38: (840, 5700, 0),
    39: (840, 5700, 0),
    40: (840, 5700, 0),
    41: (4860, 22650, 80),
    42: (4860, 22650, 0),
    43: (4860, 22650, 0),
    44: (4860, 22650, 0),
    45: (4860, 22650, 0),
    46: (4860, 22650, 0),
    47: (4860, 22650, 0),
    48: (4860, 22650, 0),
    49: (4860, 22650, 0),
    50: (4860, 22650, 0),
    51: (4860, 22650, 0),
    52: (6540, 37250, 0),
    53: (6540, 37250, 0),
    54: (6540, 37250, 0),
    55: (6540, 37250, 0),
    56: (6540, 37250, 0),
    57: (6540, 37250, 0),
    58: (6540, 37250, 0),
    59: (6540, 37250, 0),
    60: (6540, 37250, 0),
    61: (10350, 71850, 400),
    62: (10350, 71850, 0),
    63: (10350, 71850, 0),
    64: (10350, 71850, 0),
    65: (10350, 71850, 0),
    66: (10350, 71850, 0),
    67: (10350, 71850, 0),
    68: (10350, 71850, 0),
    69: (10350, 71850, 0),
    70: (10350, 71850, 0),
    71: (10350, 71850, 0),
    72: (14600, 109450, 0),
    73: (14600, 109450, 0),
    74: (14600, 109450, 0),
    75: (14600, 109450, 0),
    76: (14600, 109450, 0),
    77: (16300, 126250, 0),
    78: (16300, 126250, 0),
    79: (16300, 126250, 0),
    80: (16300, 126250, 0),
    81: (30960, 196380, 1000),
    82: (30960, 196380, 0),
    83: (30960, 196380, 0),
    84: (30960, 196380, 0),
    85: (30960, 196380, 0),
    86: (30960, 196380, 0),
    87: (30960, 196380, 0),
    88: (30960, 196380, 0),
    89: (41580, 357660, 0),
    90: (41580, 357660, 0),
    91: (41580, 357660, 0),
    92: (41580, 357660, 0),
    93: (41580, 357660, 0),
    94: (41580, 357660, 0),
    95: (41580, 357660, 0),
    96: (41580, 357660, 0),
    97: (41580, 357660, 0),
    98: (41580, 357660, 0),
    99: (41580, 357660, 0),
    100: (41580, 357660, 0),
    101: (63770, 564200, 2000),
    102: (63770, 564200, 0),
    103: (63770, 564200, 0),
    104: (63770, 564200, 0),
    105: (63770, 564200, 0),
    106: (63770, 564200, 0),
    107: (63770, 564200, 0),
    108: (63770, 564200, 0),
    109: (63770, 564200, 0),
    110: (63770, 564200, 0),
    111: (63770, 564200, 0),
    112: (63770, 564200, 0),
    113: (63770, 564200, 0),
    114: (78190, 738570, 0),
    115: (78190, 738570, 0),
    116: (83230, 813260, 0),
    117: (83230, 813260, 0),
    118: (83230, 813260, 0),
    119: (83230, 813260, 0),
    120: (83230, 813260, 0),
    121: (123040, 1153120, 4500),
    122: (123040, 1153120, 0),
    123: (123040, 1153120, 0),
    124: (169840, 1699120, 0),
    125: (169840, 1699120, 0),
    126: (169840, 1699120, 0),
    127: (169840, 1699120, 0),
    128: (169840, 1699120, 0),
    129: (169840, 1699120, 0),
    130: (183840, 1789040, 0),
    131: (183840, 1789040, 0),
    132: (185440, 1926400, 0),
    133: (185440, 1926400, 0),
    134: (185440, 1926400, 0),
    135: (185440, 1926400, 0),
    136: (185440, 1926400, 0),
    137: (185440, 1926400, 0),
    138: (200800, 2087360, 0),
    139: (200800, 2087360, 0),
    140: (200800, 2087360, 0),
    141: (235980, 2521980, 7000),
    142: (235980, 2521980, 0),
    143: (235980, 2521980, 0),
    144: (235980, 2521980, 0),
    145: (235980, 2521980, 0),
    146: (235980, 2521980, 0),
    147: (256770, 2774070, 0),
    148: (256770, 2774070, 0),
    149: (256770, 2774070, 0),
    150: (256770, 2774070, 0),
    151: (256770, 2774070, 0),
    152: (256770, 2774070, 0),
    153: (268920, 2944890, 0),
    154: (268920, 2944890, 0),
    155: (268920, 2944890, 0),
    156: (268920, 2944890, 0),
    157: (268920, 2944890, 0),
    158: (268920, 2944890, 0),
    159: (268920, 2944890, 0),
    160: (268920, 2944890, 0),
    161: (346500, 3910800, 7000),
    162: (346500, 3910800, 0),
    163: (346500, 3910800, 0),
    164: (346500, 3910800, 0),
    165: (346500, 3910800, 0),
    166: (346500, 3910800, 0),
    167: (346500, 3910800, 0),
    168: (346500, 3910800, 0),
    169: (346500, 3910800, 0),
    170: (346500, 3910800, 0),
    171: (346500, 3910800, 0),
    172: (368500, 4393300, 0),
    173: (368500, 4393300, 0),
    174: (368500, 4393300, 0),
    175: (368500, 4393300, 0),
    176: (368500, 4393300, 0),
    177: (368500, 4393300, 0),
    178: (368500, 4393300, 0),
    179: (368500, 4393300, 0),
    180: (368500, 4393300, 0),
    181: (419300, 4988500, 8000),
    182: (419300, 4988500, 0),
    183: (419300, 4988500, 0),
    184: (419300, 4988500, 0),
    185: (419300, 4988500, 0),
    186: (419300, 4988500, 0),
    187: (419300, 4988500, 0),
    188: (419300, 4988500, 0),
    189: (419300, 4988500, 0),
    190: (419300, 4988500, 0),
    191: (419300, 4988500, 0),
    192: (480500, 5983100, 0),
    193: (480500, 5983100, 0),
    194: (480500, 5983100, 0),
    195: (480500, 5983100, 0),
    196: (480500, 5983100, 0),
    197: (480500, 5983100, 0),
    198: (480500, 5983100, 0),
    199: (480500, 5983100, 0),
    200: (480500, 5983100, 0),
}

def get_level_cost(current_level: int, target_level: int) -> tuple[int, int, int]:
    """
    Calculate total cost to upgrade from current_level to target_level
    Returns (total_credits, total_battle_data, total_core_dust)
    """
    total_credits = 0
    total_battle_data = 0
    total_core_dust = 0
    
    for level in range(current_level + 1, target_level + 1):
        if level in LEVEL_REQUIREMENTS:
            credits, battle_data, core_dust = LEVEL_REQUIREMENTS[level]
            total_credits += credits
            total_battle_data += battle_data
            total_core_dust += core_dust
    
    return (total_credits, total_battle_data, total_core_dust)

def get_max_affordable_level(current_level: int, max_level: int, owned_credits: int, owned_battle_data: int, owned_core_dust: int) -> int:
    """
    Calculate the highest level achievable with current materials
    """
    current_total_credits = 0
    current_total_battle_data = 0
    current_total_core_dust = 0
    
    for level in range(current_level + 1, max_level + 1):
        if level not in LEVEL_REQUIREMENTS:
            continue
            
        credits, battle_data, core_dust = LEVEL_REQUIREMENTS[level]
        current_total_credits += credits
        current_total_battle_data += battle_data
        current_total_core_dust += core_dust
        
        if (current_total_credits > owned_credits or 
            current_total_battle_data > owned_battle_data or 
            (core_dust > 0 and current_total_core_dust > owned_core_dust)):
            return level - 1
            
    return max_level
